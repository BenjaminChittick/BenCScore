#initalize groupings
#cpds <- arrange(cpds, mw)
cpds$pool <- rep(1:200, times=10)
cost(cpds)
for (i in 1:1000) {
current.cost <- cost(cpds)
candidate <- swap(cpds)
candidate.cost <- cost(candidate)
ratio <- candidate.cost/current.cost
if (runif(1) < ratio) {
cpds <- candidate
}
}
cost(cpds)
?optim
tapply(cpds$mw, cpds$pool, shorty)
which(min(tapply(cpds$mw, cpds$pool, shorty)))
min(tapply(cpds$mw, cpds$pool, shorty))
which(tapply(cpds$mw, cpds$pool, shorty) == min(tapply(cpds$mw, cpds$pool, shorty)))
which.min(tapply(cpds$mw, cpds$pool, shorty))
?which
?which.min
min.pool <- which.min(tapply(cpds$mw, cpds$pool, shorty))
min.pool
min.set <- cpds[ cpds$pool == min.pool]
min.set <- cpds[cpds$pool == min.pool, ]
min.set
shorty(min.set$mw)
dist(min.set$mw)
which.min(dist(min.set$mw))
array(min.dist)
array(dist(min.set$mw))
set.dist <- dist(min.set$mw)
set.dist
as.matrix(set.dist)
which.min(set.dist)
which.min(as.matrix(set.dist))
which.min(dist(min.set$mw))
which.min(dist(min.set$mw)) - 10
which.min(dist(min.set$mw)) - 10 - 9
which(dist(min.set$mw) = sort(min.set)[1])
which(dist(min.set$mw) == sort(min.set)[1])
sort(min.set)[1]
min.pool <- which.min(tapply(cpds$mw, cpds$pool, shorty))
min.pool
min.set <- cpds[cpds$pool == min.pool, ]
min.set
set.dist
min(set.dist)
dist(min.set$mw)
which(dist(min.set$mw) == min(set.dist))
which(as.matrix(set.dist) == min(set.dist))
?which
which(as.matrix(set.dist) == min(set.dist), arr.ind = TRUE)
as.matrix(set.dist)
which(set.dist == min(set.dist), arr.ind = TRUE)
cost(cpds = )
cost(cpds = )
cpds[cpds$mw > 200, ]
version
remove.packages("bayespipeline")
library(ggplot2)
qqplot(c(-30, 130), stat='function', fun=dnorm, geom='line')
qqplot(c(-30, 130), stat='function', fun=dnorm, args=list(0, 10), geom='line')
dnorm(30, 0, 10)
qqplot(c(-30, 130), stat='function', fun=dnorm, geom='line')
qplot(c(-5, 5), stat = "function", fun = dnorm, geom = "line")
qplot(c(-30, 130), stat = "function", fun = dnorm, geom = "line")
qplot(c(-30, 130), stat = "function", fun = dnorm, args=list(0, 20), geom = "line")
qplot(c(-30, 130), stat = "function", fun = dnorm, args=list(0, 10), geom = "line")
qplot(c(-50, 110), stat = "function", fun = dnorm, args=list(0, 10), geom = "line")
qplot(c(-50, 110),
stat = "function",
fun = dnorm,
args=list(0, 10),
geom = "line",
xlab='% effect',
ylab='Probability',
title='Prior')
qplot(c(-50, 110),
stat = "function",
fun = dnorm,
args=list(0, 10),
geom = "line",
xlab='% effect',
ylab='Probability',
ggtitle='Prior')
qplot(c(-50, 110),
stat = "function",
fun = dnorm,
args=list(0, 10),
geom = "line",
xlab='% effect',
ylab='Probability',
main='Prior')
library(ggplot2)
data <- data.frame(prior=rnorm(20000, 50, 10))
ggplot(data, aes(prior)) +
geom_density(alpha=.4, color=NA)
ggplot(data, aes(prior)) +
geom_density(alpha=.4, color=NA, fill='red')
data <- data.frame(prior=rnorm(20000, 50, 30))
data$evidence <- rnorm(20000, 100, 10)
data$posterior <- rnorm(20000, 80, 20)
head(data)
library(ggplot2)
library(reshape2)
data <- data.frame(prior=rnorm(20000, 50, 30))
data$evidence <- rnorm(20000, 100, 10)
data$posterior <- rnorm(20000, 80, 20)
data <- melt(data)
head(data)
ggplot(data, aes(value, fill=variable)) +
geom_density(alpha=.4, color=NA)
data <- data.frame(prior=rnorm(20000, 50, 40))
data$evidence <- rnorm(20000, 100, 20)
data$posterior <- rnorm(20000, 80, 15)
data <- melt(data)
ggplot(data, aes(value, fill=variable)) +
geom_density(alpha=.4, color=NA)
ggplot(data, aes(value, fill=variable)) +
scale_color_brewer(palette='Set1') +
geom_density(alpha=.4, color=NA)
ggplot(data, aes(value, fill=variable)) +
scale_color_fill(palette='Set1') +
geom_density(alpha=.4, color=NA)
ggplot(data, aes(value, fill=variable)) +
scale_fill_brewer(palette='Set1') +
geom_density(alpha=.4, color=NA)
data <- data.frame(prior=rnorm(20000, 50, 40))
data$evidence <- rnorm(20000, 120, 20)
data$posterior <- rnorm(20000, 90, 15)
data <- melt(data)
ggplot(data, aes(value, fill=variable)) +
scale_fill_brewer(palette='Set1') +
geom_density(alpha=.4, color=NA)
ggplot(data, aes(value, fill=variable)) +
scale_fill_brewer(palette='Set1') +
geom_density(alpha=.4, color=NA) +
theme_bw()
data <- data.frame(prior=rnorm(200000, 50, 40))
data$evidence <- rnorm(200000, 120, 20)
data$posterior <- rnorm(200000, 90, 15)
data <- melt(data)
ggplot(data, aes(value, fill=variable)) +
scale_fill_brewer(palette='Set1') +
geom_density(alpha=.4, color=NA) +
theme_bw()
ggplot(data, aes(value, fill=variable)) +
scale_fill_brewer(palette='Set1') +
geom_density(alpha=.4, color=NA) +
theme_bw() +
theme(panel.grid.major = element_blank())
ggplot(data, aes(value, fill=variable)) +
scale_fill_brewer(palette='Set1') +
geom_density(alpha=.4, color=NA) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
data <- data.frame(prior=rnorm(200000, 50, 40))
data$evidence <- rnorm(200000, 200, 20)
data$posterior <- rnorm(200000, 120, 15)
data <- melt(data)
ggplot(data, aes(value, fill=variable)) +
scale_fill_brewer(palette='Set1') +
geom_density(alpha=.4, color=NA) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
data <- data.frame(prior=rnorm(200000, 50, 40))
data$evidence <- rnorm(200000, 180, 20)
data$posterior <- rnorm(200000, 120, 15)
data <- melt(data)
ggplot(data, aes(value, fill=variable)) +
scale_fill_brewer(palette='Set1') +
geom_density(alpha=.4, color=NA) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
data <- data.frame(prior=rnorm(200000, 50, 40))
data$evidence <- rnorm(200000, 160, 20)
data$posterior <- rnorm(200000, 120, 15)
data <- melt(data)
ggplot(data, aes(value, fill=variable)) +
scale_fill_brewer(palette='Set1') +
geom_density(alpha=.4, color=NA) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
panel.grid.minor = element_blank())
data <- data.frame(prior=rnorm(200000, 50, 40))
data$evidence <- rnorm(200000, 160, 30)
data$posterior <- rnorm(200000, 120, 20)
data <- melt(data)
ggplot(data, aes(value, fill=variable)) +
scale_fill_brewer(palette='Set1') +
geom_density(alpha=.4, color=NA) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(data, aes(value, fill=variable)) +
scale_fill_brewer(palette='Set1') +
geom_density(alpha=.4, color=NA) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position="none")
ggplot(data, aes(value, fill=variable)) +
geom_density(alpha=.4, color=NA) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position="none")
ggplot(data, aes(value, fill=variable)) +
scale_fill_brewer(palette='Set1') +
geom_density(alpha=0.0, color=NA) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position="none")
ggplot(data, aes(value, fill=variable)) +
scale_fill_brewer(palette='Set1') +
geom_density(alpha=1.0, color=NA) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position="none")
ggplot(data, aes(value, fill=variable)) +
scale_fill_brewer(palette='Set1') +
geom_density(alpha=0.8, color=NA) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position="none")
ggplot(data, aes(value, fill=variable)) +
scale_fill_brewer(palette='Set1') +
geom_density(alpha=0.8) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position="none")
library("bayespipeline", lib.loc="/usr/local/Cellar/r/3.1.1/R.framework/Versions/3.1/Resources/library")
?EstimateAB
EstimateAB()
EstimateAB
flik
ggplot(data, aes(value, fill=variable)) +
scale_fill_brewer(palette='Set1') +
geom_density(alpha=0.8)
ggplot(data, aes(value, fill=variable)) +
scale_fill_brewer(palette='Set1') +
geom_density(alpha=0.8) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position="none")
library(ggplot2)
library(reshape2)
data <- data.frame(prior=rnorm(200000, 0, 15))
data$evidence <- rnorm(200000, 50, 10)
data$posterior <- rnorm(200000, 40, 7)
data <- melt(data)
ggplot(data, aes(value, fill=variable)) +
scale_fill_brewer(palette='Set1') +
geom_density(alpha=0.8) +
xlab('Percent Inhibition^2') +
ylab('Probability Density') +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position="none")
ggplot(data, aes(value, fill=variable)) +
scale_fill_brewer(palette='Set1') +
geom_density(alpha=0.8) +
xlab(expression('Percent Inhibition^2')) +
ylab('Probability Density') +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position="none")
0.31/0.72
0.31/0.72 * -20
0.54/0.69
0.54/0.69*20
0.54/0.69*-20
0.54/0.69*-20 + -40
17/68
17/68*20
17/68*-20
17/68*-20 + -60
4595+500+1111
4595+500+1111 - 1540 - 1200
4595+500+1111 - 1540 - 1200 - 45 - 35
N <- 1000
x <- 1:N
z <- 0.01 * x - 5
y <- sapply(1 / (1 + exp(-z)), function(p) {rbinom(1, 1, p)})
head(N)
head(x)
head(z)
head(y)
tail(y)
plot(x, y)
x <- rnorm(100, 0, 10)
y <- rnorm(100, 0, 10)
plot(x, y)
x <- rnorm(1000, 0, 10)
y <- rnorm(1000, 0, 10)
plot(x, y)
x <- rnorm(1000, 0, 10)
x.act <- dunif(100, 10, 100)
x <- rbind(x, x.act)
library(ggplot)
x <- rnorm(1000, 0, 10)
y <- rnorm(1000, 0, 10)
x.act <- dunif(100, 10, 100)
y.act <- x.act/2 + 7
x <- rbind(x, x.act)
y <- rbind(y, y.act)
data <- data.frame(x = x,
y = y)
head(data)
View(data)
library(ggplot)
x <- rnorm(1000, 0, 10)
y <- rnorm(1000, 0, 10)
x.act <- dunif(100, 10, 100)
y.act <- x.act/2 + 7
x <- cbind(x, x.act)
y <- cbind(y, y.act)
head(x)
library(ggplot)
x <- rnorm(1000, 0, 10)
y <- rnorm(1000, 0, 10)
x.act <- dunif(100, 10, 100)
y.act <- x.act/2 + 7
x <- c(x, x.act)
y <- c(y, y.act)
head(x)
head(y)
data <- data.frame(x = x,
y = y)
head(data)
ggplot(data, aes(x=x, y=y)) +
geom_point()
library(ggplot2)
x <- rnorm(1000, 0, 10)
y <- rnorm(1000, 0, 10)
x.act <- dunif(100, 10, 100)
y.act <- x.act/2 + 7
x <- c(x, x.act)
y <- c(y, y.act)
data <- data.frame(x = x,
y = y)
ggplot(data, aes(x=x, y=y)) +
geom_point()
length(x)
length(x.act)
?dunif
x.act <- runif(100, 10, 100)
y.act <- x.act/2 + 7
x <- c(x, x.act)
y <- c(y, y.act)
data <- data.frame(x = x,
y = y)
ggplot(data, aes(x=x, y=y)) +
geom_point()
library(ggplot2)
x <- rnorm(1000, 0, 10)
y <- rnorm(1000, 0, 10)
x.act <- runif(100, 10, 100)
y.act <- x.act/2 + 7
x <- c(x, x.act)
y <- c(y, y.act)
data <- data.frame(x = x,
y = y)
ggplot(data, aes(x=x, y=y)) +
geom_point()
ggplot(data, aes(x=x, y=y)) +
geom_point() +
stat_function(up) +
stat_function(down)
up <- function(x) {
x/2 + 7
}
down <- function(x) {
(x - 7) * 2
}
ggplot(data, aes(x=x, y=y)) +
geom_point() +
stat_function(up) +
stat_function(down)
ggplot(data, aes(x=x, y=y)) +
stat_function(up) +
stat_function(down)
ggplot(data, aes(x=x, y=y)) +
stat_function(up) +
stat_function(down) +
geom_point()
ggplot(data, aes(x=x, y=y)) +
stat_function(up)
ggplot(data, aes(x=x, y=y)) +
stat_function(up) +
geom_point()
ggplot(data, aes(x=x, y=y)) +
stat_function(dnorm) +
geom_point()
ggplot(data, aes(x=x, y=y)) +
stat_function(dnorm, args=list(0, 1)) +
geom_point()
setwd("~/Documents/Packages/bayespipeline/vignettes")
x <- rep(1:5, each=3)
head(x)
class(x)
data(mex5.demo)
library("bayespipeline", lib.loc="/usr/local/Cellar/r/3.1.1/R.framework/Versions/3.1/Resources/library")
data(mex5.demo)
head(mex5.demo)
cycle.1 <- rep(1:5, each=27)
head(cycle.1)
cycle.2 <- rep(1:3, each=9)
cycle.3 <- rep(1:3, each=3)
a <- as.numeric(rep(1:3, each=3))
b <- as.numeric(rep(1:3, each=3))
c <- as.numeric(rep(1:3, each=3))
d <- data.frame(cbind(a, b, c, d))
d <- data.frame(cbind(a, b, c))
head(x)
head(x)
head(d)
class(d)
sapply(d, class)
sd(c(54, 60))
myDT <- function(x, df, m, s) {
dt((x-m)/s, df)/s
}
myDT(54, 1, 57, 4.2) * myDT(60, 1, 57, 4.2)
myDT(54, 1, 50, 7)
myDT(54, 1, 50, 7) * myDT(60, 1, 50, 7)
library(ggplot2)
ggplot(data.frame(-5:5), aes(x=x)) +
stat_function(fun=dt, args=list(1))
data.frame(-5:5)
x <- -5:5
ggplot(data.frame(x), aes(x=x)) +
stat_function(fun=dt, args=list(1))
x <- -5:5
ggplot(data.frame(x), aes(x=x)) +
stat_function(fun=dt, args=list(1)) +
stat_function(fun=dt, args=list(1)) +
stat_function(fun=dt, args=list(1)) +
ylab('Probability') +
x <- -5:5
ggplot(data.frame(x), aes(x=x)) +
stat_function(fun=dt, args=list(1)) +
stat_function(fun=dt, args=list(1)) +
stat_function(fun=dt, args=list(1)) +
ylab('Probability')
ggplot(data.frame(x), aes(x=x)) +
stat_function(fun=dt, args=list(1)) +
stat_function(fun=dt, args=list(5)) +
stat_function(fun=dt, args=list(10)) +
ylab('Probability')
library("RColorBrewer", lib.loc="/usr/local/Cellar/r/3.1.1/R.framework/Versions/3.1/Resources/library")
brewer.pal(5, 'Set1')
ggplot(data.frame(x), aes(x=x)) +
stat_function(fun=dt, args=list(1), color='#E41A1C') +
stat_function(fun=dt, args=list(5), color='#377EB8') +
stat_function(fun=dt, args=list(10), color='#4DAF4A') +
ylab('Probability')
ggplot(data.frame(x), aes(x=x)) +
stat_function(fun=dt, args=list(1), color='#E41A1C', size=1) +
stat_function(fun=dt, args=list(5), color='#377EB8', size=1) +
stat_function(fun=dt, args=list(10), color='#4DAF4A', size=1) +
ylab('Probability')
x <- -5:5
ggplot(data.frame(x), aes(x=x)) +
stat_function(fun=dt, args=list(1), color='#E41A1C', size=1) +
stat_function(fun=dt, args=list(5), color='#377EB8', size=1) +
stat_function(fun=dt, args=list(10), color='#4DAF4A', size=1) +
stat_function(fun=dnorm, args(0, 1), color='#984EA3', size=1) +
ylab('Probability')
ggplot(data.frame(x), aes(x=x)) +
stat_function(fun=dt, args=list(1), color='#E41A1C', size=1) +
stat_function(fun=dt, args=list(5), color='#377EB8', size=1) +
stat_function(fun=dt, args=list(10), color='#4DAF4A', size=1) +
stat_function(fun=dnorm, args=list(0, 1), color='#984EA3', size=1) +
ylab('Probability')
?dexp
x <- 0:50
ggplot(data.frame(x), aes(x=x)) +
stat_function(fun=dexp, args=list(1/29), size=1) +
ylab('Probability')
library("devtools", lib.loc="/usr/local/Cellar/r/3.1.1/R.framework/Versions/3.1/Resources/library")
1/(1.134696*5.452730)
?rgamma
x <- data.frame(true.var = 1 / rgamma(100000, 30, 3100))
head(x)
x$obs.1 <- sapply(x$true.var, function(x) rnorm(1, 0, sqrt(x)))
x$obs.2 <- sapply(x$true.var, function(x) rnorm(1, 0, sqrt(x)))
head(x)
x$obs.var <- apply(x[, c('obs.1', 'obs.2')], 1, var)
head(x)
x$degf <- 1
x.ab <- EstimateAB(x$obs.var, x$degf)
hist(x$true.var, freq=FALSE)
library(MCMCpack)
prediction <- dinvgamma(50:200, x.ab[1], x.ab[2])
lines(x=50:200, y=prediction)
